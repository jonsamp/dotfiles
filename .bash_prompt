#!/usr/bin/env bash

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM='xterm-256color';
fi;

prompt_git() {
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

      # Get the short symbolic ref.
  		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
  		# Otherwise, just give up.
  		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
  			git rev-parse --short HEAD 2> /dev/null || \
  			echo '(unknown)')";

		fi;

		echo "${1}${branchName}";
	else
		return;
	fi;
}

# bold='\e[9m';
bold=$(tput bold)
reset="\e[0m";
black="\e[0;30m";
blue="\e[1;34m";
cyan="\e[1;36m";
green="\e[1;32m";
orange="\e[38;5;208m";
blueGrey="\e[38;5;109m"
purple="\e[1;35m";
red="\e[1;31m";
violet="\e[1;35m";
white="\e[1;37m";
yellow="\e[1;33m";
highlight="\e[48;5;109m";

PS1="\[${black}${highlight}\] \D{%-H:%M} \[${reset}\] "; # date
PS1+="\[${bold}\]\[${blueGrey}\]\W"; # working directory
PS1+="\$(prompt_git \"\[${white}\] → \[${blueGrey}\]\" )"; # Git repository details
PS1+=" \[${white}\]\$ "; # `$` (and reset color)
export PS1;
